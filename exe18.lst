CCS PCM C Compiler, Version 5.008, 5967               04-jun-18 17:25

               Filename:   C:\Users\Marlon\Desktop\microcontrolador\testes\exe18.lst

               ROM used:   1933 words (24%)
                           Largest free fragment is 2048
               RAM used:   18 (5%) at main() level
                           32 (9%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   357
0003:  NOP
.................... #include <exe18.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,10
000D:  DATA 49,37
000E:  DATA E9,31
000F:  DATA E9,30
0010:  DATA 6E,32
0011:  DATA 6F,17
0012:  DATA 2E,17
0013:  DATA 00,00
0014:  DATA 0C,10
0015:  DATA C6,30
0016:  DATA FA,32
0017:  DATA 6E,32
0018:  DATA 6F,10
0019:  DATA 0A,10
001A:  DATA EC,32
001B:  DATA 69,3A
001C:  DATA 75,39
001D:  DATA 61,17
001E:  DATA 2E,17
001F:  DATA 00,00
0020:  DATA 0C,10
0021:  DATA D4,32
0022:  DATA EE,39
0023:  DATA E1,37
0024:  DATA A0,1E
0025:  DATA 20,18
0026:  DATA 00,01
0027:  DATA 0A,10
0028:  DATA 41,36
0029:  DATA F4,3A
002A:  DATA F2,30
002B:  DATA A0,1E
002C:  DATA 20,18
002D:  DATA 00,01
002E:  DATA 0C,10
002F:  DATA D4,32
0030:  DATA EE,39
0031:  DATA E1,37
0032:  DATA A0,1E
0033:  DATA 20,18
0034:  DATA 2E,19
0035:  DATA 35,00
0036:  DATA 0A,10
0037:  DATA 41,36
0038:  DATA F4,3A
0039:  DATA F2,30
003A:  DATA A0,1E
003B:  DATA A0,18
003C:  DATA 20,00
003D:  DATA 0C,10
003E:  DATA D4,32
003F:  DATA EE,39
0040:  DATA E1,37
0041:  DATA A0,1E
0042:  DATA 20,18
0043:  DATA AE,1A
0044:  DATA 00,01
0045:  DATA 0A,10
0046:  DATA 41,36
0047:  DATA F4,3A
0048:  DATA F2,30
0049:  DATA A0,1E
004A:  DATA 20,19
004B:  DATA 20,00
004C:  DATA 0C,10
004D:  DATA D4,32
004E:  DATA EE,39
004F:  DATA E1,37
0050:  DATA A0,1E
0051:  DATA 20,18
0052:  DATA AE,1B
0053:  DATA 35,00
0054:  DATA 0A,10
0055:  DATA 41,36
0056:  DATA F4,3A
0057:  DATA F2,30
0058:  DATA A0,1E
0059:  DATA A0,19
005A:  DATA 20,00
005B:  DATA 0C,10
005C:  DATA D4,32
005D:  DATA EE,39
005E:  DATA E1,37
005F:  DATA A0,1E
0060:  DATA A0,18
0061:  DATA 00,01
0062:  DATA 0A,10
0063:  DATA 41,36
0064:  DATA F4,3A
0065:  DATA F2,30
0066:  DATA A0,1E
0067:  DATA 20,1A
0068:  DATA 20,00
0069:  DATA 0C,10
006A:  DATA D4,32
006B:  DATA EE,39
006C:  DATA E1,37
006D:  DATA A0,1E
006E:  DATA A0,18
006F:  DATA 2E,19
0070:  DATA 35,00
0071:  DATA 0A,10
0072:  DATA 41,36
0073:  DATA F4,3A
0074:  DATA F2,30
0075:  DATA A0,1E
0076:  DATA A0,1A
0077:  DATA 20,00
0078:  DATA 0C,10
0079:  DATA D4,32
007A:  DATA EE,39
007B:  DATA E1,37
007C:  DATA A0,1E
007D:  DATA A0,18
007E:  DATA AE,1A
007F:  DATA 00,01
0080:  DATA 0A,10
0081:  DATA 41,36
0082:  DATA F4,3A
0083:  DATA F2,30
0084:  DATA A0,1E
0085:  DATA 20,1B
0086:  DATA 20,00
0087:  DATA 0C,10
0088:  DATA D4,32
0089:  DATA EE,39
008A:  DATA E1,37
008B:  DATA A0,1E
008C:  DATA A0,18
008D:  DATA AE,1B
008E:  DATA 35,00
008F:  DATA 0A,10
0090:  DATA 41,36
0091:  DATA F4,3A
0092:  DATA F2,30
0093:  DATA A0,1E
0094:  DATA A0,1B
0095:  DATA 20,00
0096:  DATA 0C,10
0097:  DATA D4,32
0098:  DATA EE,39
0099:  DATA E1,37
009A:  DATA A0,1E
009B:  DATA 20,19
009C:  DATA 00,01
009D:  DATA 0A,10
009E:  DATA 41,36
009F:  DATA F4,3A
00A0:  DATA F2,30
00A1:  DATA A0,1E
00A2:  DATA 20,1C
00A3:  DATA 20,00
00A4:  DATA 0C,10
00A5:  DATA D4,32
00A6:  DATA EE,39
00A7:  DATA E1,37
00A8:  DATA A0,1E
00A9:  DATA 20,19
00AA:  DATA 2E,19
00AB:  DATA 35,00
00AC:  DATA 0A,10
00AD:  DATA 41,36
00AE:  DATA F4,3A
00AF:  DATA F2,30
00B0:  DATA A0,1E
00B1:  DATA A0,1C
00B2:  DATA 20,00
00B3:  DATA 0C,10
00B4:  DATA D4,32
00B5:  DATA EE,39
00B6:  DATA E1,37
00B7:  DATA A0,1E
00B8:  DATA 20,19
00B9:  DATA AE,1A
00BA:  DATA 00,01
00BB:  DATA 0A,10
00BC:  DATA 41,36
00BD:  DATA F4,3A
00BE:  DATA F2,30
00BF:  DATA A0,1E
00C0:  DATA A0,18
00C1:  DATA 30,10
00C2:  DATA 00,01
00C3:  DATA 0C,10
00C4:  DATA D4,32
00C5:  DATA EE,39
00C6:  DATA E1,37
00C7:  DATA A0,1E
00C8:  DATA 20,19
00C9:  DATA AE,1B
00CA:  DATA 35,00
00CB:  DATA 0A,10
00CC:  DATA 41,36
00CD:  DATA F4,3A
00CE:  DATA F2,30
00CF:  DATA A0,1E
00D0:  DATA A0,18
00D1:  DATA 31,10
00D2:  DATA 00,01
00D3:  DATA 0C,10
00D4:  DATA D4,32
00D5:  DATA EE,39
00D6:  DATA E1,37
00D7:  DATA A0,1E
00D8:  DATA A0,19
00D9:  DATA 00,01
00DA:  DATA 0A,10
00DB:  DATA 41,36
00DC:  DATA F4,3A
00DD:  DATA F2,30
00DE:  DATA A0,1E
00DF:  DATA A0,18
00E0:  DATA 32,10
00E1:  DATA 00,01
00E2:  DATA 0C,10
00E3:  DATA D4,32
00E4:  DATA EE,39
00E5:  DATA E1,37
00E6:  DATA A0,1E
00E7:  DATA A0,19
00E8:  DATA 2E,19
00E9:  DATA 35,00
00EA:  DATA 0A,10
00EB:  DATA 41,36
00EC:  DATA F4,3A
00ED:  DATA F2,30
00EE:  DATA A0,1E
00EF:  DATA A0,18
00F0:  DATA 33,10
00F1:  DATA 00,01
00F2:  DATA 0C,10
00F3:  DATA D4,32
00F4:  DATA EE,39
00F5:  DATA E1,37
00F6:  DATA A0,1E
00F7:  DATA A0,19
00F8:  DATA AE,1A
00F9:  DATA 00,01
00FA:  DATA 0A,10
00FB:  DATA 41,36
00FC:  DATA F4,3A
00FD:  DATA F2,30
00FE:  DATA A0,1E
00FF:  DATA A0,18
0100:  DATA 34,10
0101:  DATA 00,01
0102:  DATA 0C,10
0103:  DATA D4,32
0104:  DATA EE,39
0105:  DATA E1,37
0106:  DATA A0,1E
0107:  DATA A0,19
0108:  DATA AE,1B
0109:  DATA 35,00
010A:  DATA 0A,10
010B:  DATA 41,36
010C:  DATA F4,3A
010D:  DATA F2,30
010E:  DATA A0,1E
010F:  DATA A0,18
0110:  DATA 35,10
0111:  DATA 00,01
0112:  DATA 0C,10
0113:  DATA D4,32
0114:  DATA EE,39
0115:  DATA E1,37
0116:  DATA A0,1E
0117:  DATA 20,1A
0118:  DATA 00,01
0119:  DATA 0A,10
011A:  DATA 41,36
011B:  DATA F4,3A
011C:  DATA F2,30
011D:  DATA A0,1E
011E:  DATA A0,18
011F:  DATA 36,10
0120:  DATA 00,01
0121:  DATA 0C,10
0122:  DATA D4,32
0123:  DATA EE,39
0124:  DATA E1,37
0125:  DATA A0,1E
0126:  DATA 20,1A
0127:  DATA 2E,19
0128:  DATA 35,00
0129:  DATA 0A,10
012A:  DATA 41,36
012B:  DATA F4,3A
012C:  DATA F2,30
012D:  DATA A0,1E
012E:  DATA A0,18
012F:  DATA 37,10
0130:  DATA 00,01
0131:  DATA 0C,10
0132:  DATA D4,32
0133:  DATA EE,39
0134:  DATA E1,37
0135:  DATA A0,1E
0136:  DATA 20,1A
0137:  DATA AE,1A
0138:  DATA 00,01
0139:  DATA 0A,10
013A:  DATA 41,36
013B:  DATA F4,3A
013C:  DATA F2,30
013D:  DATA A0,1E
013E:  DATA A0,18
013F:  DATA 38,10
0140:  DATA 00,01
0141:  DATA 0C,10
0142:  DATA D4,32
0143:  DATA EE,39
0144:  DATA E1,37
0145:  DATA A0,1E
0146:  DATA 20,1A
0147:  DATA AE,1B
0148:  DATA 35,00
0149:  DATA 0A,10
014A:  DATA 41,36
014B:  DATA F4,3A
014C:  DATA F2,30
014D:  DATA A0,1E
014E:  DATA A0,18
014F:  DATA 39,10
0150:  DATA 00,01
0151:  DATA 0C,10
0152:  DATA D4,32
0153:  DATA EE,39
0154:  DATA E1,37
0155:  DATA A0,1E
0156:  DATA A0,1A
0157:  DATA 00,01
0158:  DATA 0A,10
0159:  DATA 41,36
015A:  DATA F4,3A
015B:  DATA F2,30
015C:  DATA A0,1E
015D:  DATA 20,19
015E:  DATA 30,10
015F:  DATA 00,00
*
02AE:  MOVF   0B,W
02AF:  MOVWF  2C
02B0:  BCF    0B.7
02B1:  BSF    03.5
02B2:  BSF    03.6
02B3:  BSF    0C.7
02B4:  BSF    0C.0
02B5:  NOP
02B6:  NOP
02B7:  BCF    03.5
02B8:  MOVF   0C,W
02B9:  ANDLW  7F
02BA:  BTFSC  03.2
02BB:  GOTO   2F5
02BC:  BCF    03.6
02BD:  MOVWF  2D
02BE:  BSF    03.6
02BF:  MOVF   0D,W
02C0:  BCF    03.6
02C1:  MOVWF  2E
02C2:  BSF    03.6
02C3:  MOVF   0F,W
02C4:  BCF    03.6
02C5:  MOVWF  2F
02C6:  MOVF   2D,W
02C7:  MOVWF  30
02C8:  CALL   282
02C9:  MOVF   2E,W
02CA:  BSF    03.6
02CB:  MOVWF  0D
02CC:  BCF    03.6
02CD:  MOVF   2F,W
02CE:  BSF    03.6
02CF:  MOVWF  0F
02D0:  BSF    03.5
02D1:  BSF    0C.7
02D2:  BSF    0C.0
02D3:  NOP
02D4:  NOP
02D5:  BCF    03.5
02D6:  RLF    0C,W
02D7:  RLF    0E,W
02D8:  ANDLW  7F
02D9:  BTFSC  03.2
02DA:  GOTO   2F5
02DB:  BCF    03.6
02DC:  MOVWF  2D
02DD:  BSF    03.6
02DE:  MOVF   0D,W
02DF:  BCF    03.6
02E0:  MOVWF  2E
02E1:  BSF    03.6
02E2:  MOVF   0F,W
02E3:  BCF    03.6
02E4:  MOVWF  2F
02E5:  MOVF   2D,W
02E6:  MOVWF  30
02E7:  CALL   282
02E8:  MOVF   2E,W
02E9:  BSF    03.6
02EA:  MOVWF  0D
02EB:  BCF    03.6
02EC:  MOVF   2F,W
02ED:  BSF    03.6
02EE:  MOVWF  0F
02EF:  INCF   0D,F
02F0:  BTFSC  03.2
02F1:  INCF   0F,F
02F2:  BCF    03.6
02F3:  GOTO   2B1
02F4:  BSF    03.6
02F5:  BCF    03.6
02F6:  BTFSC  2C.7
02F7:  BSF    0B.7
02F8:  RETURN
02F9:  MOVLW  8E
02FA:  MOVWF  77
02FB:  MOVF   2D,W
02FC:  MOVWF  78
02FD:  MOVF   2C,W
02FE:  MOVWF  79
02FF:  CLRF   7A
0300:  MOVF   78,F
0301:  BTFSS  03.2
0302:  GOTO   30D
0303:  MOVF   79,W
0304:  MOVWF  78
0305:  CLRF   79
0306:  MOVLW  08
0307:  SUBWF  77,F
0308:  MOVF   78,F
0309:  BTFSS  03.2
030A:  GOTO   30D
030B:  CLRF   77
030C:  GOTO   315
030D:  BCF    03.0
030E:  BTFSC  78.7
030F:  GOTO   314
0310:  RLF    79,F
0311:  RLF    78,F
0312:  DECF   77,F
0313:  GOTO   30D
0314:  BCF    78.7
0315:  BCF    0A.3
0316:  BCF    0A.4
0317:  GOTO   39D (RETURN)
0318:  MOVF   2D,W
0319:  MOVWF  34
031A:  MOVF   31,W
031B:  XORWF  34,F
031C:  BTFSS  34.7
031D:  GOTO   323
031E:  BCF    03.2
031F:  BCF    03.0
0320:  BTFSC  2D.7
0321:  BSF    03.0
0322:  GOTO   356
0323:  MOVF   2D,W
0324:  MOVWF  34
0325:  MOVF   30,W
0326:  MOVWF  35
0327:  MOVF   2C,W
0328:  SUBWF  35,F
0329:  BTFSC  03.2
032A:  GOTO   331
032B:  BTFSS  34.7
032C:  GOTO   356
032D:  MOVF   03,W
032E:  XORLW  01
032F:  MOVWF  03
0330:  GOTO   356
0331:  MOVF   31,W
0332:  MOVWF  35
0333:  MOVF   2D,W
0334:  SUBWF  35,F
0335:  BTFSC  03.2
0336:  GOTO   33D
0337:  BTFSS  34.7
0338:  GOTO   356
0339:  MOVF   03,W
033A:  XORLW  01
033B:  MOVWF  03
033C:  GOTO   356
033D:  MOVF   32,W
033E:  MOVWF  35
033F:  MOVF   2E,W
0340:  SUBWF  35,F
0341:  BTFSC  03.2
0342:  GOTO   349
0343:  BTFSS  34.7
0344:  GOTO   356
0345:  MOVF   03,W
0346:  XORLW  01
0347:  MOVWF  03
0348:  GOTO   356
0349:  MOVF   33,W
034A:  MOVWF  35
034B:  MOVF   2F,W
034C:  SUBWF  35,F
034D:  BTFSC  03.2
034E:  GOTO   355
034F:  BTFSS  34.7
0350:  GOTO   356
0351:  MOVF   03,W
0352:  XORLW  01
0353:  MOVWF  03
0354:  GOTO   356
0355:  BCF    03.0
0356:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0160:  MOVLW  31
0161:  MOVWF  04
0162:  BCF    03.7
0163:  MOVF   00,W
0164:  BTFSC  03.2
0165:  GOTO   173
0166:  MOVLW  06
0167:  MOVWF  78
0168:  CLRF   77
0169:  DECFSZ 77,F
016A:  GOTO   169
016B:  DECFSZ 78,F
016C:  GOTO   168
016D:  MOVLW  7B
016E:  MOVWF  77
016F:  DECFSZ 77,F
0170:  GOTO   16F
0171:  DECFSZ 00,F
0172:  GOTO   166
0173:  RETURN
....................  
....................  
.................... #define LCD_ENABLE_PIN PIN_B1 
.................... #define LCD_RS_PIN PIN_B2 
.................... #define LCD_RW_PIN PIN_B4 
.................... #define LCD_DATA4 PIN_D4 
.................... #define LCD_DATA5 PIN_D5 
.................... #define LCD_DATA6 PIN_D6 
.................... #define LCD_DATA7 PIN_D7 
....................  
....................  
.................... #define ADC_CLOCK_DIV_16  
....................  
.................... #include <lcd.c> //bilbioteca LCD 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
01DD:  BSF    08.4
....................    output_float(LCD_DATA5); 
01DE:  BSF    08.5
....................    output_float(LCD_DATA6); 
01DF:  BSF    08.6
....................    output_float(LCD_DATA7); 
01E0:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
01E1:  BCF    03.5
01E2:  BSF    06.4
01E3:  BSF    03.5
01E4:  BCF    06.4
....................    delay_cycles(1); 
01E5:  NOP
....................    lcd_output_enable(1); 
01E6:  BCF    03.5
01E7:  BSF    06.1
01E8:  BSF    03.5
01E9:  BCF    06.1
....................    delay_cycles(1); 
01EA:  NOP
....................    high = lcd_read_nibble(); 
01EB:  BCF    03.5
01EC:  CALL   1A4
01ED:  MOVF   78,W
01EE:  MOVWF  38
....................        
....................    lcd_output_enable(0); 
01EF:  BCF    06.1
01F0:  BSF    03.5
01F1:  BCF    06.1
....................    delay_cycles(1); 
01F2:  NOP
....................    lcd_output_enable(1); 
01F3:  BCF    03.5
01F4:  BSF    06.1
01F5:  BSF    03.5
01F6:  BCF    06.1
....................    delay_us(1); 
01F7:  GOTO   1F8
01F8:  GOTO   1F9
01F9:  NOP
....................    low = lcd_read_nibble(); 
01FA:  BCF    03.5
01FB:  CALL   1A4
01FC:  MOVF   78,W
01FD:  MOVWF  37
....................        
....................    lcd_output_enable(0); 
01FE:  BCF    06.1
01FF:  BSF    03.5
0200:  BCF    06.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0201:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0202:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0203:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0204:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0205:  BCF    03.5
0206:  SWAPF  38,W
0207:  MOVWF  77
0208:  MOVLW  F0
0209:  ANDWF  77,F
020A:  MOVF   77,W
020B:  IORWF  37,W
020C:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
01A4:  CLRF   39
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
01A5:  BSF    03.5
01A6:  BSF    08.4
01A7:  MOVLW  00
01A8:  BCF    03.5
01A9:  BTFSC  08.4
01AA:  MOVLW  01
01AB:  IORWF  39,F
....................    n |= input(LCD_DATA5) << 1; 
01AC:  BSF    03.5
01AD:  BSF    08.5
01AE:  MOVLW  00
01AF:  BCF    03.5
01B0:  BTFSC  08.5
01B1:  MOVLW  01
01B2:  MOVWF  77
01B3:  BCF    03.0
01B4:  RLF    77,F
01B5:  MOVF   77,W
01B6:  IORWF  39,F
....................    n |= input(LCD_DATA6) << 2; 
01B7:  BSF    03.5
01B8:  BSF    08.6
01B9:  MOVLW  00
01BA:  BCF    03.5
01BB:  BTFSC  08.6
01BC:  MOVLW  01
01BD:  MOVWF  77
01BE:  RLF    77,F
01BF:  RLF    77,F
01C0:  MOVLW  FC
01C1:  ANDWF  77,F
01C2:  MOVF   77,W
01C3:  IORWF  39,F
....................    n |= input(LCD_DATA7) << 3; 
01C4:  BSF    03.5
01C5:  BSF    08.7
01C6:  MOVLW  00
01C7:  BCF    03.5
01C8:  BTFSC  08.7
01C9:  MOVLW  01
01CA:  MOVWF  77
01CB:  RLF    77,F
01CC:  RLF    77,F
01CD:  RLF    77,F
01CE:  MOVLW  F8
01CF:  ANDWF  77,F
01D0:  MOVF   77,W
01D1:  IORWF  39,F
....................     
....................    return(n); 
01D2:  MOVF   39,W
01D3:  MOVWF  78
....................   #else 
01D4:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0174:  BTFSC  38.0
0175:  GOTO   178
0176:  BCF    08.4
0177:  GOTO   179
0178:  BSF    08.4
0179:  BSF    03.5
017A:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
017B:  BCF    03.5
017C:  BTFSC  38.1
017D:  GOTO   180
017E:  BCF    08.5
017F:  GOTO   181
0180:  BSF    08.5
0181:  BSF    03.5
0182:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0183:  BCF    03.5
0184:  BTFSC  38.2
0185:  GOTO   188
0186:  BCF    08.6
0187:  GOTO   189
0188:  BSF    08.6
0189:  BSF    03.5
018A:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
018B:  BCF    03.5
018C:  BTFSC  38.3
018D:  GOTO   190
018E:  BCF    08.7
018F:  GOTO   191
0190:  BSF    08.7
0191:  BSF    03.5
0192:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0193:  NOP
....................    lcd_output_enable(1); 
0194:  BCF    03.5
0195:  BSF    06.1
0196:  BSF    03.5
0197:  BCF    06.1
....................    delay_us(2); 
0198:  MOVLW  02
0199:  MOVWF  77
019A:  DECFSZ 77,F
019B:  GOTO   19A
019C:  GOTO   19D
019D:  NOP
....................    lcd_output_enable(0); 
019E:  BCF    03.5
019F:  BCF    06.1
01A0:  BSF    03.5
01A1:  BCF    06.1
01A2:  BCF    03.5
01A3:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
01D5:  BSF    03.5
01D6:  BCF    06.1
....................    lcd_rs_tris(); 
01D7:  BCF    06.2
....................    lcd_rw_tris(); 
01D8:  BCF    06.4
....................   #endif 
....................  
....................    lcd_output_rs(0); 
01D9:  BCF    03.5
01DA:  BCF    06.2
01DB:  BSF    03.5
01DC:  BCF    06.2
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
020D:  MOVF   78,W
020E:  MOVWF  37
020F:  BTFSS  37.7
0210:  GOTO   213
0211:  BSF    03.5
0212:  GOTO   1DD
....................    lcd_output_rs(address); 
0213:  MOVF   35,F
0214:  BTFSS  03.2
0215:  GOTO   218
0216:  BCF    06.2
0217:  GOTO   219
0218:  BSF    06.2
0219:  BSF    03.5
021A:  BCF    06.2
....................    delay_cycles(1); 
021B:  NOP
....................    lcd_output_rw(0); 
021C:  BCF    03.5
021D:  BCF    06.4
021E:  BSF    03.5
021F:  BCF    06.4
....................    delay_cycles(1); 
0220:  NOP
....................    lcd_output_enable(0); 
0221:  BCF    03.5
0222:  BCF    06.1
0223:  BSF    03.5
0224:  BCF    06.1
....................    lcd_send_nibble(n >> 4); 
0225:  BCF    03.5
0226:  SWAPF  36,W
0227:  MOVWF  37
0228:  MOVLW  0F
0229:  ANDWF  37,F
022A:  MOVF   37,W
022B:  MOVWF  38
022C:  CALL   174
....................    lcd_send_nibble(n & 0xf); 
022D:  MOVF   36,W
022E:  ANDLW  0F
022F:  MOVWF  37
0230:  MOVWF  38
0231:  CALL   174
0232:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0233:  BSF    03.5
0234:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0235:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0236:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0237:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0238:  BCF    06.1
....................    lcd_rs_tris(); 
0239:  BCF    06.2
....................    lcd_rw_tris(); 
023A:  BCF    06.4
....................  #endif 
....................  
....................    lcd_output_rs(0); 
023B:  BCF    03.5
023C:  BCF    06.2
023D:  BSF    03.5
023E:  BCF    06.2
....................    lcd_output_rw(0); 
023F:  BCF    03.5
0240:  BCF    06.4
0241:  BSF    03.5
0242:  BCF    06.4
....................    lcd_output_enable(0); 
0243:  BCF    03.5
0244:  BCF    06.1
0245:  BSF    03.5
0246:  BCF    06.1
....................      
....................    delay_ms(15); 
0247:  MOVLW  0F
0248:  BCF    03.5
0249:  MOVWF  31
024A:  CALL   160
....................    for(i=1;i<=3;++i) 
024B:  MOVLW  01
024C:  MOVWF  2C
024D:  MOVF   2C,W
024E:  SUBLW  03
024F:  BTFSS  03.0
0250:  GOTO   259
....................    { 
....................        lcd_send_nibble(3); 
0251:  MOVLW  03
0252:  MOVWF  38
0253:  CALL   174
....................        delay_ms(5); 
0254:  MOVLW  05
0255:  MOVWF  31
0256:  CALL   160
0257:  INCF   2C,F
0258:  GOTO   24D
....................    } 
....................     
....................    lcd_send_nibble(2); 
0259:  MOVLW  02
025A:  MOVWF  38
025B:  CALL   174
....................    delay_ms(5); 
025C:  MOVLW  05
025D:  MOVWF  31
025E:  CALL   160
....................    for(i=0;i<=3;++i) 
025F:  CLRF   2C
0260:  MOVF   2C,W
0261:  SUBLW  03
0262:  BTFSS  03.0
0263:  GOTO   26D
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0264:  MOVF   2C,W
0265:  CALL   004
0266:  MOVWF  2D
0267:  CLRF   35
0268:  MOVF   2D,W
0269:  MOVWF  36
026A:  CALL   1D5
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
026B:  INCF   2C,F
026C:  GOTO   260
026D:  BCF    0A.3
026E:  BCF    0A.4
026F:  GOTO   36F (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0270:  DECFSZ 32,W
0271:  GOTO   273
0272:  GOTO   276
....................       address=LCD_LINE_TWO; 
0273:  MOVLW  40
0274:  MOVWF  33
0275:  GOTO   277
....................    else 
....................       address=0; 
0276:  CLRF   33
....................       
....................    address+=x-1; 
0277:  MOVLW  01
0278:  SUBWF  31,W
0279:  ADDWF  33,F
....................    lcd_send_byte(0,0x80|address); 
027A:  MOVF   33,W
027B:  IORLW  80
027C:  MOVWF  34
027D:  CLRF   35
027E:  MOVF   34,W
027F:  MOVWF  36
0280:  CALL   1D5
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0281:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0282:  MOVF   30,W
0283:  XORLW  07
0284:  BTFSC  03.2
0285:  GOTO   290
0286:  XORLW  0B
0287:  BTFSC  03.2
0288:  GOTO   295
0289:  XORLW  06
028A:  BTFSC  03.2
028B:  GOTO   29D
028C:  XORLW  02
028D:  BTFSC  03.2
028E:  GOTO   2A3
028F:  GOTO   2A8
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0290:  MOVLW  01
0291:  MOVWF  31
0292:  MOVWF  32
0293:  CALL   270
0294:  GOTO   2AD
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0295:  CLRF   35
0296:  MOVLW  01
0297:  MOVWF  36
0298:  CALL   1D5
....................                      delay_ms(2); 
0299:  MOVLW  02
029A:  MOVWF  31
029B:  CALL   160
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
029C:  GOTO   2AD
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
029D:  MOVLW  01
029E:  MOVWF  31
029F:  MOVLW  02
02A0:  MOVWF  32
02A1:  CALL   270
02A2:  GOTO   2AD
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
02A3:  CLRF   35
02A4:  MOVLW  10
02A5:  MOVWF  36
02A6:  CALL   1D5
02A7:  GOTO   2AD
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
02A8:  MOVLW  01
02A9:  MOVWF  35
02AA:  MOVF   30,W
02AB:  MOVWF  36
02AC:  CALL   1D5
....................      #endif 
....................    } 
02AD:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... float i,j, altura; 
.................... void main() 
*
0357:  MOVF   03,W
0358:  ANDLW  1F
0359:  MOVWF  03
035A:  BSF    03.5
035B:  BSF    1F.0
035C:  BSF    1F.1
035D:  BSF    1F.2
035E:  BCF    1F.3
035F:  MOVLW  07
0360:  MOVWF  1C
0361:  BCF    03.7
.................... { 
....................    setup_adc_ports(AN0); //entrada A0 do pic analogico 
0362:  BCF    1F.0
0363:  BSF    1F.1
0364:  BSF    1F.2
0365:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL);  
0366:  BCF    1F.6
0367:  BCF    03.5
0368:  BSF    1F.6
0369:  BSF    1F.7
036A:  BSF    03.5
036B:  BSF    1F.7
036C:  BCF    03.5
036D:  BSF    1F.0
....................    lcd_init(); //FUNCAO DO LCD  
036E:  GOTO   233
....................     
....................    lcd_putc("\f Iniciando..."); 
036F:  MOVLW  0C
0370:  BSF    03.6
0371:  MOVWF  0D
0372:  MOVLW  00
0373:  MOVWF  0F
0374:  BCF    03.6
0375:  CALL   2AE
....................    delay_ms(1000); 
0376:  MOVLW  04
0377:  MOVWF  2C
0378:  MOVLW  FA
0379:  MOVWF  31
037A:  CALL   160
037B:  DECFSZ 2C,F
037C:  GOTO   378
....................     
....................    lcd_putc("\f Fazendo \n leitura..."); 
037D:  MOVLW  14
037E:  BSF    03.6
037F:  MOVWF  0D
0380:  MOVLW  00
0381:  MOVWF  0F
0382:  BCF    03.6
0383:  CALL   2AE
....................    delay_ms(1000); 
0384:  MOVLW  04
0385:  MOVWF  2C
0386:  MOVLW  FA
0387:  MOVWF  31
0388:  CALL   160
0389:  DECFSZ 2C,F
038A:  GOTO   386
....................     
....................    while(TRUE) 
....................    {   
....................          set_adc_channel(0); 
038B:  MOVLW  00
038C:  MOVWF  78
038D:  MOVF   1F,W
038E:  ANDLW  C7
038F:  IORWF  78,W
0390:  MOVWF  1F
....................          i = read_adc(); 
0391:  BSF    1F.2
0392:  BTFSC  1F.2
0393:  GOTO   392
0394:  MOVF   1E,W
0395:  MOVWF  7A
0396:  BSF    03.5
0397:  MOVF   1E,W
0398:  BCF    03.5
0399:  MOVWF  2C
039A:  MOVF   1E,W
039B:  MOVWF  2D
039C:  GOTO   2F9
039D:  MOVF   7A,W
039E:  MOVWF  23
039F:  MOVF   79,W
03A0:  MOVWF  22
03A1:  MOVF   78,W
03A2:  MOVWF  21
03A3:  MOVF   77,W
03A4:  MOVWF  20
....................              
....................          if(i < 20){ 
03A5:  MOVF   23,W
03A6:  MOVWF  2F
03A7:  MOVF   22,W
03A8:  MOVWF  2E
03A9:  MOVF   21,W
03AA:  MOVWF  2D
03AB:  MOVF   20,W
03AC:  MOVWF  2C
03AD:  CLRF   33
03AE:  CLRF   32
03AF:  MOVLW  20
03B0:  MOVWF  31
03B1:  MOVLW  83
03B2:  MOVWF  30
03B3:  CALL   318
03B4:  BTFSS  03.0
03B5:  GOTO   3C4
....................             lcd_putc("\f Tensao = 0"); 
03B6:  MOVLW  20
03B7:  BSF    03.6
03B8:  MOVWF  0D
03B9:  MOVLW  00
03BA:  MOVWF  0F
03BB:  BCF    03.6
03BC:  CALL   2AE
....................             lcd_putc("\n Altura = 0"); 
03BD:  MOVLW  27
03BE:  BSF    03.6
03BF:  MOVWF  0D
03C0:  MOVLW  00
03C1:  MOVWF  0F
03C2:  BCF    03.6
03C3:  CALL   2AE
....................          } 
....................           
....................          if( ( i > 21) && (i < 62)){ 
03C4:  CLRF   2F
03C5:  CLRF   2E
03C6:  MOVLW  28
03C7:  MOVWF  2D
03C8:  MOVLW  83
03C9:  MOVWF  2C
03CA:  MOVF   23,W
03CB:  MOVWF  33
03CC:  MOVF   22,W
03CD:  MOVWF  32
03CE:  MOVF   21,W
03CF:  MOVWF  31
03D0:  MOVF   20,W
03D1:  MOVWF  30
03D2:  CALL   318
03D3:  BTFSS  03.0
03D4:  GOTO   3F4
03D5:  MOVF   23,W
03D6:  MOVWF  2F
03D7:  MOVF   22,W
03D8:  MOVWF  2E
03D9:  MOVF   21,W
03DA:  MOVWF  2D
03DB:  MOVF   20,W
03DC:  MOVWF  2C
03DD:  CLRF   33
03DE:  CLRF   32
03DF:  MOVLW  78
03E0:  MOVWF  31
03E1:  MOVLW  84
03E2:  MOVWF  30
03E3:  CALL   318
03E4:  BTFSS  03.0
03E5:  GOTO   3F4
....................             lcd_putc("\f Tensao = 0.25"); 
03E6:  MOVLW  2E
03E7:  BSF    03.6
03E8:  MOVWF  0D
03E9:  MOVLW  00
03EA:  MOVWF  0F
03EB:  BCF    03.6
03EC:  CALL   2AE
....................             lcd_putc("\n Altura = 1 "); 
03ED:  MOVLW  36
03EE:  BSF    03.6
03EF:  MOVWF  0D
03F0:  MOVLW  00
03F1:  MOVWF  0F
03F2:  BCF    03.6
03F3:  CALL   2AE
....................          } 
....................           
....................          if((i > 65) && (i < 105)){ 
03F4:  CLRF   2F
03F5:  CLRF   2E
03F6:  MOVLW  02
03F7:  MOVWF  2D
03F8:  MOVLW  85
03F9:  MOVWF  2C
03FA:  MOVF   23,W
03FB:  MOVWF  33
03FC:  MOVF   22,W
03FD:  MOVWF  32
03FE:  MOVF   21,W
03FF:  MOVWF  31
0400:  MOVF   20,W
0401:  MOVWF  30
0402:  CALL   318
0403:  BTFSS  03.0
0404:  GOTO   424
0405:  MOVF   23,W
0406:  MOVWF  2F
0407:  MOVF   22,W
0408:  MOVWF  2E
0409:  MOVF   21,W
040A:  MOVWF  2D
040B:  MOVF   20,W
040C:  MOVWF  2C
040D:  CLRF   33
040E:  CLRF   32
040F:  MOVLW  52
0410:  MOVWF  31
0411:  MOVLW  85
0412:  MOVWF  30
0413:  CALL   318
0414:  BTFSS  03.0
0415:  GOTO   424
....................             lcd_putc("\f Tensao = 0.5"); 
0416:  MOVLW  3D
0417:  BSF    03.6
0418:  MOVWF  0D
0419:  MOVLW  00
041A:  MOVWF  0F
041B:  BCF    03.6
041C:  CALL   2AE
....................             lcd_putc("\n Altura = 2 "); 
041D:  MOVLW  45
041E:  BSF    03.6
041F:  MOVWF  0D
0420:  MOVLW  00
0421:  MOVWF  0F
0422:  BCF    03.6
0423:  CALL   2AE
....................          } 
....................           
....................          if((i > 105) && (i < 155)){ 
0424:  CLRF   2F
0425:  CLRF   2E
0426:  MOVLW  52
0427:  MOVWF  2D
0428:  MOVLW  85
0429:  MOVWF  2C
042A:  MOVF   23,W
042B:  MOVWF  33
042C:  MOVF   22,W
042D:  MOVWF  32
042E:  MOVF   21,W
042F:  MOVWF  31
0430:  MOVF   20,W
0431:  MOVWF  30
0432:  CALL   318
0433:  BTFSS  03.0
0434:  GOTO   454
0435:  MOVF   23,W
0436:  MOVWF  2F
0437:  MOVF   22,W
0438:  MOVWF  2E
0439:  MOVF   21,W
043A:  MOVWF  2D
043B:  MOVF   20,W
043C:  MOVWF  2C
043D:  CLRF   33
043E:  CLRF   32
043F:  MOVLW  1B
0440:  MOVWF  31
0441:  MOVLW  86
0442:  MOVWF  30
0443:  CALL   318
0444:  BTFSS  03.0
0445:  GOTO   454
....................             lcd_putc("\f Tensao = 0.75"); 
0446:  MOVLW  4C
0447:  BSF    03.6
0448:  MOVWF  0D
0449:  MOVLW  00
044A:  MOVWF  0F
044B:  BCF    03.6
044C:  CALL   2AE
....................             lcd_putc("\n Altura = 3 "); 
044D:  MOVLW  54
044E:  BSF    03.6
044F:  MOVWF  0D
0450:  MOVLW  00
0451:  MOVWF  0F
0452:  BCF    03.6
0453:  CALL   2AE
....................          } 
....................           
....................          if((i > 156) && (i < 185)){ 
0454:  CLRF   2F
0455:  CLRF   2E
0456:  MOVLW  1C
0457:  MOVWF  2D
0458:  MOVLW  86
0459:  MOVWF  2C
045A:  MOVF   23,W
045B:  MOVWF  33
045C:  MOVF   22,W
045D:  MOVWF  32
045E:  MOVF   21,W
045F:  MOVWF  31
0460:  MOVF   20,W
0461:  MOVWF  30
0462:  CALL   318
0463:  BTFSS  03.0
0464:  GOTO   484
0465:  MOVF   23,W
0466:  MOVWF  2F
0467:  MOVF   22,W
0468:  MOVWF  2E
0469:  MOVF   21,W
046A:  MOVWF  2D
046B:  MOVF   20,W
046C:  MOVWF  2C
046D:  CLRF   33
046E:  CLRF   32
046F:  MOVLW  39
0470:  MOVWF  31
0471:  MOVLW  86
0472:  MOVWF  30
0473:  CALL   318
0474:  BTFSS  03.0
0475:  GOTO   484
....................             lcd_putc("\f Tensao = 1"); 
0476:  MOVLW  5B
0477:  BSF    03.6
0478:  MOVWF  0D
0479:  MOVLW  00
047A:  MOVWF  0F
047B:  BCF    03.6
047C:  CALL   2AE
....................             lcd_putc("\n Altura = 4 "); 
047D:  MOVLW  62
047E:  BSF    03.6
047F:  MOVWF  0D
0480:  MOVLW  00
0481:  MOVWF  0F
0482:  BCF    03.6
0483:  CALL   2AE
....................          } 
....................           
....................          if((i > 186) && (i < 240)){ 
0484:  CLRF   2F
0485:  CLRF   2E
0486:  MOVLW  3A
0487:  MOVWF  2D
0488:  MOVLW  86
0489:  MOVWF  2C
048A:  MOVF   23,W
048B:  MOVWF  33
048C:  MOVF   22,W
048D:  MOVWF  32
048E:  MOVF   21,W
048F:  MOVWF  31
0490:  MOVF   20,W
0491:  MOVWF  30
0492:  CALL   318
0493:  BTFSS  03.0
0494:  GOTO   4B4
0495:  MOVF   23,W
0496:  MOVWF  2F
0497:  MOVF   22,W
0498:  MOVWF  2E
0499:  MOVF   21,W
049A:  MOVWF  2D
049B:  MOVF   20,W
049C:  MOVWF  2C
049D:  CLRF   33
049E:  CLRF   32
049F:  MOVLW  70
04A0:  MOVWF  31
04A1:  MOVLW  86
04A2:  MOVWF  30
04A3:  CALL   318
04A4:  BTFSS  03.0
04A5:  GOTO   4B4
....................             lcd_putc("\f Tensao = 1.25"); 
04A6:  MOVLW  69
04A7:  BSF    03.6
04A8:  MOVWF  0D
04A9:  MOVLW  00
04AA:  MOVWF  0F
04AB:  BCF    03.6
04AC:  CALL   2AE
....................             lcd_putc("\n Altura = 5 "); 
04AD:  MOVLW  71
04AE:  BSF    03.6
04AF:  MOVWF  0D
04B0:  MOVLW  00
04B1:  MOVWF  0F
04B2:  BCF    03.6
04B3:  CALL   2AE
....................          } 
....................           
....................          if((i > 241) && (i < 254)){ 
04B4:  CLRF   2F
04B5:  CLRF   2E
04B6:  MOVLW  71
04B7:  MOVWF  2D
04B8:  MOVLW  86
04B9:  MOVWF  2C
04BA:  MOVF   23,W
04BB:  MOVWF  33
04BC:  MOVF   22,W
04BD:  MOVWF  32
04BE:  MOVF   21,W
04BF:  MOVWF  31
04C0:  MOVF   20,W
04C1:  MOVWF  30
04C2:  CALL   318
04C3:  BTFSS  03.0
04C4:  GOTO   4E4
04C5:  MOVF   23,W
04C6:  MOVWF  2F
04C7:  MOVF   22,W
04C8:  MOVWF  2E
04C9:  MOVF   21,W
04CA:  MOVWF  2D
04CB:  MOVF   20,W
04CC:  MOVWF  2C
04CD:  CLRF   33
04CE:  CLRF   32
04CF:  MOVLW  7E
04D0:  MOVWF  31
04D1:  MOVLW  86
04D2:  MOVWF  30
04D3:  CALL   318
04D4:  BTFSS  03.0
04D5:  GOTO   4E4
....................             lcd_putc("\f Tensao = 1.5"); 
04D6:  MOVLW  78
04D7:  BSF    03.6
04D8:  MOVWF  0D
04D9:  MOVLW  00
04DA:  MOVWF  0F
04DB:  BCF    03.6
04DC:  CALL   2AE
....................             lcd_putc("\n Altura = 6 "); 
04DD:  MOVLW  80
04DE:  BSF    03.6
04DF:  MOVWF  0D
04E0:  MOVLW  00
04E1:  MOVWF  0F
04E2:  BCF    03.6
04E3:  CALL   2AE
....................          } 
....................           
....................          if((i > 259) && (i < 282)){ 
04E4:  CLRF   2F
04E5:  MOVLW  80
04E6:  MOVWF  2E
04E7:  MOVLW  01
04E8:  MOVWF  2D
04E9:  MOVLW  87
04EA:  MOVWF  2C
04EB:  MOVF   23,W
04EC:  MOVWF  33
04ED:  MOVF   22,W
04EE:  MOVWF  32
04EF:  MOVF   21,W
04F0:  MOVWF  31
04F1:  MOVF   20,W
04F2:  MOVWF  30
04F3:  CALL   318
04F4:  BTFSS  03.0
04F5:  GOTO   515
04F6:  MOVF   23,W
04F7:  MOVWF  2F
04F8:  MOVF   22,W
04F9:  MOVWF  2E
04FA:  MOVF   21,W
04FB:  MOVWF  2D
04FC:  MOVF   20,W
04FD:  MOVWF  2C
04FE:  CLRF   33
04FF:  CLRF   32
0500:  MOVLW  0D
0501:  MOVWF  31
0502:  MOVLW  87
0503:  MOVWF  30
0504:  CALL   318
0505:  BTFSS  03.0
0506:  GOTO   515
....................             lcd_putc("\f Tensao = 1.75"); 
0507:  MOVLW  87
0508:  BSF    03.6
0509:  MOVWF  0D
050A:  MOVLW  00
050B:  MOVWF  0F
050C:  BCF    03.6
050D:  CALL   2AE
....................             lcd_putc("\n Altura = 7 "); 
050E:  MOVLW  8F
050F:  BSF    03.6
0510:  MOVWF  0D
0511:  MOVLW  00
0512:  MOVWF  0F
0513:  BCF    03.6
0514:  CALL   2AE
....................          } 
....................           
....................          if((i > 283) && (i < 317)){ 
0515:  CLRF   2F
0516:  MOVLW  80
0517:  MOVWF  2E
0518:  MOVLW  0D
0519:  MOVWF  2D
051A:  MOVLW  87
051B:  MOVWF  2C
051C:  MOVF   23,W
051D:  MOVWF  33
051E:  MOVF   22,W
051F:  MOVWF  32
0520:  MOVF   21,W
0521:  MOVWF  31
0522:  MOVF   20,W
0523:  MOVWF  30
0524:  CALL   318
0525:  BTFSS  03.0
0526:  GOTO   547
0527:  MOVF   23,W
0528:  MOVWF  2F
0529:  MOVF   22,W
052A:  MOVWF  2E
052B:  MOVF   21,W
052C:  MOVWF  2D
052D:  MOVF   20,W
052E:  MOVWF  2C
052F:  CLRF   33
0530:  MOVLW  80
0531:  MOVWF  32
0532:  MOVLW  1E
0533:  MOVWF  31
0534:  MOVLW  87
0535:  MOVWF  30
0536:  CALL   318
0537:  BTFSS  03.0
0538:  GOTO   547
....................             lcd_putc("\f Tensao = 2"); 
0539:  MOVLW  96
053A:  BSF    03.6
053B:  MOVWF  0D
053C:  MOVLW  00
053D:  MOVWF  0F
053E:  BCF    03.6
053F:  CALL   2AE
....................             lcd_putc("\n Altura = 8 "); 
0540:  MOVLW  9D
0541:  BSF    03.6
0542:  MOVWF  0D
0543:  MOVLW  00
0544:  MOVWF  0F
0545:  BCF    03.6
0546:  CALL   2AE
....................          } 
....................           
....................          if((i > 319) && (i < 339)){ 
0547:  CLRF   2F
0548:  MOVLW  80
0549:  MOVWF  2E
054A:  MOVLW  1F
054B:  MOVWF  2D
054C:  MOVLW  87
054D:  MOVWF  2C
054E:  MOVF   23,W
054F:  MOVWF  33
0550:  MOVF   22,W
0551:  MOVWF  32
0552:  MOVF   21,W
0553:  MOVWF  31
0554:  MOVF   20,W
0555:  MOVWF  30
0556:  CALL   318
0557:  BTFSS  03.0
0558:  GOTO   579
0559:  MOVF   23,W
055A:  MOVWF  2F
055B:  MOVF   22,W
055C:  MOVWF  2E
055D:  MOVF   21,W
055E:  MOVWF  2D
055F:  MOVF   20,W
0560:  MOVWF  2C
0561:  CLRF   33
0562:  MOVLW  80
0563:  MOVWF  32
0564:  MOVLW  29
0565:  MOVWF  31
0566:  MOVLW  87
0567:  MOVWF  30
0568:  CALL   318
0569:  BTFSS  03.0
056A:  GOTO   579
....................             lcd_putc("\f Tensao = 2.25"); 
056B:  MOVLW  A4
056C:  BSF    03.6
056D:  MOVWF  0D
056E:  MOVLW  00
056F:  MOVWF  0F
0570:  BCF    03.6
0571:  CALL   2AE
....................             lcd_putc("\n Altura = 9 "); 
0572:  MOVLW  AC
0573:  BSF    03.6
0574:  MOVWF  0D
0575:  MOVLW  00
0576:  MOVWF  0F
0577:  BCF    03.6
0578:  CALL   2AE
....................          } 
....................           
....................          if((i > 340) && (i < 358)){ 
0579:  CLRF   2F
057A:  CLRF   2E
057B:  MOVLW  2A
057C:  MOVWF  2D
057D:  MOVLW  87
057E:  MOVWF  2C
057F:  MOVF   23,W
0580:  MOVWF  33
0581:  MOVF   22,W
0582:  MOVWF  32
0583:  MOVF   21,W
0584:  MOVWF  31
0585:  MOVF   20,W
0586:  MOVWF  30
0587:  CALL   318
0588:  BTFSS  03.0
0589:  GOTO   5A9
058A:  MOVF   23,W
058B:  MOVWF  2F
058C:  MOVF   22,W
058D:  MOVWF  2E
058E:  MOVF   21,W
058F:  MOVWF  2D
0590:  MOVF   20,W
0591:  MOVWF  2C
0592:  CLRF   33
0593:  CLRF   32
0594:  MOVLW  33
0595:  MOVWF  31
0596:  MOVLW  87
0597:  MOVWF  30
0598:  CALL   318
0599:  BTFSS  03.0
059A:  GOTO   5A9
....................             lcd_putc("\f Tensao = 2.5"); 
059B:  MOVLW  B3
059C:  BSF    03.6
059D:  MOVWF  0D
059E:  MOVLW  00
059F:  MOVWF  0F
05A0:  BCF    03.6
05A1:  CALL   2AE
....................             lcd_putc("\n Altura = 10 "); 
05A2:  MOVLW  BB
05A3:  BSF    03.6
05A4:  MOVWF  0D
05A5:  MOVLW  00
05A6:  MOVWF  0F
05A7:  BCF    03.6
05A8:  CALL   2AE
....................          } 
....................           
....................          if((i > 359) && (i < 395)){ 
05A9:  CLRF   2F
05AA:  MOVLW  80
05AB:  MOVWF  2E
05AC:  MOVLW  33
05AD:  MOVWF  2D
05AE:  MOVLW  87
05AF:  MOVWF  2C
05B0:  MOVF   23,W
05B1:  MOVWF  33
05B2:  MOVF   22,W
05B3:  MOVWF  32
05B4:  MOVF   21,W
05B5:  MOVWF  31
05B6:  MOVF   20,W
05B7:  MOVWF  30
05B8:  CALL   318
05B9:  BTFSS  03.0
05BA:  GOTO   5DB
05BB:  MOVF   23,W
05BC:  MOVWF  2F
05BD:  MOVF   22,W
05BE:  MOVWF  2E
05BF:  MOVF   21,W
05C0:  MOVWF  2D
05C1:  MOVF   20,W
05C2:  MOVWF  2C
05C3:  CLRF   33
05C4:  MOVLW  80
05C5:  MOVWF  32
05C6:  MOVLW  45
05C7:  MOVWF  31
05C8:  MOVLW  87
05C9:  MOVWF  30
05CA:  CALL   318
05CB:  BTFSS  03.0
05CC:  GOTO   5DB
....................             lcd_putc("\f Tensao = 2.75"); 
05CD:  MOVLW  C3
05CE:  BSF    03.6
05CF:  MOVWF  0D
05D0:  MOVLW  00
05D1:  MOVWF  0F
05D2:  BCF    03.6
05D3:  CALL   2AE
....................             lcd_putc("\n Altura = 11 "); 
05D4:  MOVLW  CB
05D5:  BSF    03.6
05D6:  MOVWF  0D
05D7:  MOVLW  00
05D8:  MOVWF  0F
05D9:  BCF    03.6
05DA:  CALL   2AE
....................          } 
....................           
....................          if((i > 396) && (i < 400)){ 
05DB:  CLRF   2F
05DC:  CLRF   2E
05DD:  MOVLW  46
05DE:  MOVWF  2D
05DF:  MOVLW  87
05E0:  MOVWF  2C
05E1:  MOVF   23,W
05E2:  MOVWF  33
05E3:  MOVF   22,W
05E4:  MOVWF  32
05E5:  MOVF   21,W
05E6:  MOVWF  31
05E7:  MOVF   20,W
05E8:  MOVWF  30
05E9:  CALL   318
05EA:  BTFSS  03.0
05EB:  GOTO   60B
05EC:  MOVF   23,W
05ED:  MOVWF  2F
05EE:  MOVF   22,W
05EF:  MOVWF  2E
05F0:  MOVF   21,W
05F1:  MOVWF  2D
05F2:  MOVF   20,W
05F3:  MOVWF  2C
05F4:  CLRF   33
05F5:  CLRF   32
05F6:  MOVLW  48
05F7:  MOVWF  31
05F8:  MOVLW  87
05F9:  MOVWF  30
05FA:  CALL   318
05FB:  BTFSS  03.0
05FC:  GOTO   60B
....................             lcd_putc("\f Tensao = 3"); 
05FD:  MOVLW  D3
05FE:  BSF    03.6
05FF:  MOVWF  0D
0600:  MOVLW  00
0601:  MOVWF  0F
0602:  BCF    03.6
0603:  CALL   2AE
....................             lcd_putc("\n Altura = 12 "); 
0604:  MOVLW  DA
0605:  BSF    03.6
0606:  MOVWF  0D
0607:  MOVLW  00
0608:  MOVWF  0F
0609:  BCF    03.6
060A:  CALL   2AE
....................          } 
....................           
....................          if((i > 401) && (i < 431)){ 
060B:  CLRF   2F
060C:  MOVLW  80
060D:  MOVWF  2E
060E:  MOVLW  48
060F:  MOVWF  2D
0610:  MOVLW  87
0611:  MOVWF  2C
0612:  MOVF   23,W
0613:  MOVWF  33
0614:  MOVF   22,W
0615:  MOVWF  32
0616:  MOVF   21,W
0617:  MOVWF  31
0618:  MOVF   20,W
0619:  MOVWF  30
061A:  CALL   318
061B:  BTFSS  03.0
061C:  GOTO   63D
061D:  MOVF   23,W
061E:  MOVWF  2F
061F:  MOVF   22,W
0620:  MOVWF  2E
0621:  MOVF   21,W
0622:  MOVWF  2D
0623:  MOVF   20,W
0624:  MOVWF  2C
0625:  CLRF   33
0626:  MOVLW  80
0627:  MOVWF  32
0628:  MOVLW  57
0629:  MOVWF  31
062A:  MOVLW  87
062B:  MOVWF  30
062C:  CALL   318
062D:  BTFSS  03.0
062E:  GOTO   63D
....................             lcd_putc("\f Tensao = 3.25"); 
062F:  MOVLW  E2
0630:  BSF    03.6
0631:  MOVWF  0D
0632:  MOVLW  00
0633:  MOVWF  0F
0634:  BCF    03.6
0635:  CALL   2AE
....................             lcd_putc("\n Altura = 13 "); 
0636:  MOVLW  EA
0637:  BSF    03.6
0638:  MOVWF  0D
0639:  MOVLW  00
063A:  MOVWF  0F
063B:  BCF    03.6
063C:  CALL   2AE
....................          } 
....................           
....................          if((i > 433) && (i < 440)){ 
063D:  CLRF   2F
063E:  MOVLW  80
063F:  MOVWF  2E
0640:  MOVLW  58
0641:  MOVWF  2D
0642:  MOVLW  87
0643:  MOVWF  2C
0644:  MOVF   23,W
0645:  MOVWF  33
0646:  MOVF   22,W
0647:  MOVWF  32
0648:  MOVF   21,W
0649:  MOVWF  31
064A:  MOVF   20,W
064B:  MOVWF  30
064C:  CALL   318
064D:  BTFSS  03.0
064E:  GOTO   66E
064F:  MOVF   23,W
0650:  MOVWF  2F
0651:  MOVF   22,W
0652:  MOVWF  2E
0653:  MOVF   21,W
0654:  MOVWF  2D
0655:  MOVF   20,W
0656:  MOVWF  2C
0657:  CLRF   33
0658:  CLRF   32
0659:  MOVLW  5C
065A:  MOVWF  31
065B:  MOVLW  87
065C:  MOVWF  30
065D:  CALL   318
065E:  BTFSS  03.0
065F:  GOTO   66E
....................             lcd_putc("\f Tensao = 3.5"); 
0660:  MOVLW  F2
0661:  BSF    03.6
0662:  MOVWF  0D
0663:  MOVLW  00
0664:  MOVWF  0F
0665:  BCF    03.6
0666:  CALL   2AE
....................             lcd_putc("\n Altura = 14 "); 
0667:  MOVLW  FA
0668:  BSF    03.6
0669:  MOVWF  0D
066A:  MOVLW  00
066B:  MOVWF  0F
066C:  BCF    03.6
066D:  CALL   2AE
....................          } 
....................           
....................          if((i > 441) && (i < 456)){ 
066E:  CLRF   2F
066F:  MOVLW  80
0670:  MOVWF  2E
0671:  MOVLW  5C
0672:  MOVWF  2D
0673:  MOVLW  87
0674:  MOVWF  2C
0675:  MOVF   23,W
0676:  MOVWF  33
0677:  MOVF   22,W
0678:  MOVWF  32
0679:  MOVF   21,W
067A:  MOVWF  31
067B:  MOVF   20,W
067C:  MOVWF  30
067D:  CALL   318
067E:  BTFSS  03.0
067F:  GOTO   69F
0680:  MOVF   23,W
0681:  MOVWF  2F
0682:  MOVF   22,W
0683:  MOVWF  2E
0684:  MOVF   21,W
0685:  MOVWF  2D
0686:  MOVF   20,W
0687:  MOVWF  2C
0688:  CLRF   33
0689:  CLRF   32
068A:  MOVLW  64
068B:  MOVWF  31
068C:  MOVLW  87
068D:  MOVWF  30
068E:  CALL   318
068F:  BTFSS  03.0
0690:  GOTO   69F
....................             lcd_putc("\f Tensao = 3.75"); 
0691:  MOVLW  02
0692:  BSF    03.6
0693:  MOVWF  0D
0694:  MOVLW  01
0695:  MOVWF  0F
0696:  BCF    03.6
0697:  CALL   2AE
....................             lcd_putc("\n Altura = 15 "); 
0698:  MOVLW  0A
0699:  BSF    03.6
069A:  MOVWF  0D
069B:  MOVLW  01
069C:  MOVWF  0F
069D:  BCF    03.6
069E:  CALL   2AE
....................          } 
....................           
....................          if((i > 457) && (i < 464)){ 
069F:  CLRF   2F
06A0:  MOVLW  80
06A1:  MOVWF  2E
06A2:  MOVLW  64
06A3:  MOVWF  2D
06A4:  MOVLW  87
06A5:  MOVWF  2C
06A6:  MOVF   23,W
06A7:  MOVWF  33
06A8:  MOVF   22,W
06A9:  MOVWF  32
06AA:  MOVF   21,W
06AB:  MOVWF  31
06AC:  MOVF   20,W
06AD:  MOVWF  30
06AE:  CALL   318
06AF:  BTFSS  03.0
06B0:  GOTO   6D0
06B1:  MOVF   23,W
06B2:  MOVWF  2F
06B3:  MOVF   22,W
06B4:  MOVWF  2E
06B5:  MOVF   21,W
06B6:  MOVWF  2D
06B7:  MOVF   20,W
06B8:  MOVWF  2C
06B9:  CLRF   33
06BA:  CLRF   32
06BB:  MOVLW  68
06BC:  MOVWF  31
06BD:  MOVLW  87
06BE:  MOVWF  30
06BF:  CALL   318
06C0:  BTFSS  03.0
06C1:  GOTO   6D0
....................             lcd_putc("\f Tensao = 4"); 
06C2:  MOVLW  12
06C3:  BSF    03.6
06C4:  MOVWF  0D
06C5:  MOVLW  01
06C6:  MOVWF  0F
06C7:  BCF    03.6
06C8:  CALL   2AE
....................             lcd_putc("\n Altura = 16 "); 
06C9:  MOVLW  19
06CA:  BSF    03.6
06CB:  MOVWF  0D
06CC:  MOVLW  01
06CD:  MOVWF  0F
06CE:  BCF    03.6
06CF:  CALL   2AE
....................          } 
....................           
....................          if((i > 465) && (i < 473)){ 
06D0:  CLRF   2F
06D1:  MOVLW  80
06D2:  MOVWF  2E
06D3:  MOVLW  68
06D4:  MOVWF  2D
06D5:  MOVLW  87
06D6:  MOVWF  2C
06D7:  MOVF   23,W
06D8:  MOVWF  33
06D9:  MOVF   22,W
06DA:  MOVWF  32
06DB:  MOVF   21,W
06DC:  MOVWF  31
06DD:  MOVF   20,W
06DE:  MOVWF  30
06DF:  CALL   318
06E0:  BTFSS  03.0
06E1:  GOTO   702
06E2:  MOVF   23,W
06E3:  MOVWF  2F
06E4:  MOVF   22,W
06E5:  MOVWF  2E
06E6:  MOVF   21,W
06E7:  MOVWF  2D
06E8:  MOVF   20,W
06E9:  MOVWF  2C
06EA:  CLRF   33
06EB:  MOVLW  80
06EC:  MOVWF  32
06ED:  MOVLW  6C
06EE:  MOVWF  31
06EF:  MOVLW  87
06F0:  MOVWF  30
06F1:  CALL   318
06F2:  BTFSS  03.0
06F3:  GOTO   702
....................             lcd_putc("\f Tensao = 4.25"); 
06F4:  MOVLW  21
06F5:  BSF    03.6
06F6:  MOVWF  0D
06F7:  MOVLW  01
06F8:  MOVWF  0F
06F9:  BCF    03.6
06FA:  CALL   2AE
....................             lcd_putc("\n Altura = 17 "); 
06FB:  MOVLW  29
06FC:  BSF    03.6
06FD:  MOVWF  0D
06FE:  MOVLW  01
06FF:  MOVWF  0F
0700:  BCF    03.6
0701:  CALL   2AE
....................          } 
....................           
....................          if((i > 474) && (i < 481)){ 
0702:  CLRF   2F
0703:  CLRF   2E
0704:  MOVLW  6D
0705:  MOVWF  2D
0706:  MOVLW  87
0707:  MOVWF  2C
0708:  MOVF   23,W
0709:  MOVWF  33
070A:  MOVF   22,W
070B:  MOVWF  32
070C:  MOVF   21,W
070D:  MOVWF  31
070E:  MOVF   20,W
070F:  MOVWF  30
0710:  CALL   318
0711:  BTFSS  03.0
0712:  GOTO   733
0713:  MOVF   23,W
0714:  MOVWF  2F
0715:  MOVF   22,W
0716:  MOVWF  2E
0717:  MOVF   21,W
0718:  MOVWF  2D
0719:  MOVF   20,W
071A:  MOVWF  2C
071B:  CLRF   33
071C:  MOVLW  80
071D:  MOVWF  32
071E:  MOVLW  70
071F:  MOVWF  31
0720:  MOVLW  87
0721:  MOVWF  30
0722:  CALL   318
0723:  BTFSS  03.0
0724:  GOTO   733
....................             lcd_putc("\f Tensao = 4.5"); 
0725:  MOVLW  31
0726:  BSF    03.6
0727:  MOVWF  0D
0728:  MOVLW  01
0729:  MOVWF  0F
072A:  BCF    03.6
072B:  CALL   2AE
....................             lcd_putc("\n Altura = 18 "); 
072C:  MOVLW  39
072D:  BSF    03.6
072E:  MOVWF  0D
072F:  MOVLW  01
0730:  MOVWF  0F
0731:  BCF    03.6
0732:  CALL   2AE
....................          } 
....................           
....................          if((i > 482) && (i < 490)){ 
0733:  CLRF   2F
0734:  CLRF   2E
0735:  MOVLW  71
0736:  MOVWF  2D
0737:  MOVLW  87
0738:  MOVWF  2C
0739:  MOVF   23,W
073A:  MOVWF  33
073B:  MOVF   22,W
073C:  MOVWF  32
073D:  MOVF   21,W
073E:  MOVWF  31
073F:  MOVF   20,W
0740:  MOVWF  30
0741:  CALL   318
0742:  BTFSS  03.0
0743:  GOTO   763
0744:  MOVF   23,W
0745:  MOVWF  2F
0746:  MOVF   22,W
0747:  MOVWF  2E
0748:  MOVF   21,W
0749:  MOVWF  2D
074A:  MOVF   20,W
074B:  MOVWF  2C
074C:  CLRF   33
074D:  CLRF   32
074E:  MOVLW  75
074F:  MOVWF  31
0750:  MOVLW  87
0751:  MOVWF  30
0752:  CALL   318
0753:  BTFSS  03.0
0754:  GOTO   763
....................             lcd_putc("\f Tensao = 4.75"); 
0755:  MOVLW  41
0756:  BSF    03.6
0757:  MOVWF  0D
0758:  MOVLW  01
0759:  MOVWF  0F
075A:  BCF    03.6
075B:  CALL   2AE
....................             lcd_putc("\n Altura = 19 "); 
075C:  MOVLW  49
075D:  BSF    03.6
075E:  MOVWF  0D
075F:  MOVLW  01
0760:  MOVWF  0F
0761:  BCF    03.6
0762:  CALL   2AE
....................          } 
....................           
....................          if(i >= 490 ){ 
0763:  CLRF   2F
0764:  CLRF   2E
0765:  MOVLW  75
0766:  MOVWF  2D
0767:  MOVLW  87
0768:  MOVWF  2C
0769:  MOVF   23,W
076A:  MOVWF  33
076B:  MOVF   22,W
076C:  MOVWF  32
076D:  MOVF   21,W
076E:  MOVWF  31
076F:  MOVF   20,W
0770:  MOVWF  30
0771:  CALL   318
0772:  BTFSC  03.0
0773:  GOTO   776
0774:  BTFSS  03.2
0775:  GOTO   784
....................             lcd_putc("\f Tensao = 5"); 
0776:  MOVLW  51
0777:  BSF    03.6
0778:  MOVWF  0D
0779:  MOVLW  01
077A:  MOVWF  0F
077B:  BCF    03.6
077C:  CALL   2AE
....................             lcd_putc("\n Altura = 20 "); 
077D:  MOVLW  58
077E:  BSF    03.6
077F:  MOVWF  0D
0780:  MOVLW  01
0781:  MOVWF  0F
0782:  BCF    03.6
0783:  CALL   2AE
....................          } 
....................           
....................                   
....................          //printf(lcd_putc,"\f Sensor : %f",i); 
....................          delay_ms(1000); 
0784:  MOVLW  04
0785:  MOVWF  2C
0786:  MOVLW  FA
0787:  MOVWF  31
0788:  CALL   160
0789:  DECFSZ 2C,F
078A:  GOTO   786
078B:  GOTO   38B
....................    } 
....................  
.................... } 
078C:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
